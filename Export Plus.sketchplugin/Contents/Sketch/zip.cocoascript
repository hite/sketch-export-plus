@import "library/common.js"

//
com.utom.extend({
    specExportPlus: function(_allArtBoard){
        log('>>>><>')
        if(!this.configs) return false;

        var context = this.context;
        var document = this.document;
        var selection = this.selection;

        if(!_allArtBoard || _allArtBoard.length == 0){
            this.message(_("Select 1 or multiple artboards"));
            return false;
        }

        savePath = this.getSavePath();
        if(!savePath) return false;
        [[NSFileManager defaultManager] createDirectoryAtPath:savePath withIntermediateDirectories:true attributes:nil error:nil];

        var pluginPath = NSString.stringWithString(this.context.scriptPath).stringByDeletingLastPathComponent();
        var tempPath = pluginPath.stringByAppendingPathComponent("assets/template2.html");
        var jqPath = pluginPath.stringByAppendingPathComponent("assets/jquery-1.12.0.min.js");
        var indexHtmlPath = pluginPath.stringByAppendingPathComponent("assets/index.html");
        var indexJsPath = pluginPath.stringByAppendingPathComponent("assets/index.js");
        var indexCssPath = pluginPath.stringByAppendingPathComponent("assets/index.css");
        var jsappPath = pluginPath.stringByAppendingPathComponent("assets/app2.js");
        var specPath = pluginPath.stringByAppendingPathComponent("assets/spec.js");
        var cssnorPath = pluginPath.stringByAppendingPathComponent("assets/normalize-3.0.3.min.css");
        var cssappPath = pluginPath.stringByAppendingPathComponent("assets/app2.css");

        var tempCon = [NSString stringWithContentsOfFile:tempPath encoding:NSUTF8StringEncoding error:nil];
        var jqCon = [NSString stringWithContentsOfFile:jqPath encoding:NSUTF8StringEncoding error:nil];
        var indexCon = [NSString stringWithContentsOfFile:indexHtmlPath encoding:NSUTF8StringEncoding error:nil];
        var jsIndex = [NSString stringWithContentsOfFile:indexJsPath encoding:NSUTF8StringEncoding error:nil];
        var cssIndex = [NSString stringWithContentsOfFile:indexCssPath encoding:NSUTF8StringEncoding error:nil];
        var jsappCon = [NSString stringWithContentsOfFile:jsappPath encoding:NSUTF8StringEncoding error:nil];
        var specCon = [NSString stringWithContentsOfFile:specPath encoding:NSUTF8StringEncoding error:nil];
        var cssnorCon = [NSString stringWithContentsOfFile:cssnorPath encoding:NSUTF8StringEncoding error:nil];
        var cssappCon = [NSString stringWithContentsOfFile:cssappPath encoding:NSUTF8StringEncoding error:nil];
        this.templateContents = {
            tempCon: tempCon,
            jqCon: jqCon,
            jsappCon: jsappCon,
            specCon: specCon,
            cssnorCon: cssnorCon,
            cssappCon: cssappCon
        }

        for (var i = 0, len = _allArtBoard.length; i < len; i++) {
            this.getArtboard(_allArtBoard[i], savePath);
        }

        var sliceLayers = this.page.exportableLayers();

        var artboardsData = this.artboardsData;
        var slicesData = this.slicesData;

        if(slicesData.length > 0){
            var sContent = NSString.stringWithString("var slices = " + JSON.stringify(slicesData) + ";");
            var sExportURL = savePath.stringByAppendingPathComponent( "slices.js");
            [sContent writeToFile: sExportURL
                              atomically: false
                                encoding: NSUTF8StringEncoding
                                   error: null];
        }
        log("artboardsData.length = " + artboardsData.length);
        if(artboardsData.length > 0){
            var aContent = NSString.stringWithString("var artboards = " + JSON.stringify(artboardsData) + ";");
            var aExportURL = savePath.stringByAppendingPathComponent( "artboards.js");

            // log("artboardsData : " + aContent);
            log("aExportURL : " + aExportURL);

            [aContent writeToFile: aExportURL
                              atomically: false
                                encoding: NSUTF8StringEncoding
                                   error: null];

        }

        if(this.configsColors){
            this.getColors();
            var cContent = NSString.stringWithString("var colors = " + JSON.stringify(this.configs.colors) + ";");
            var cExportURL = savePath.stringByAppendingPathComponent( "colors.js");

            [cContent writeToFile: cExportURL
                              atomically: false
                                encoding: NSUTF8StringEncoding
                                   error: null];
        }
        // export index.html
        log("start export index.html");
        var specContent = this.template(indexCon, {
            cssNormalize: cssnorCon,
            cssIndex: cssIndex,
            jsjQuery: jqCon,
            jsIndex: jsIndex,
            jsSpec: specContent
        });
        var exportURL = savePath.stringByAppendingPathComponent("index.html");
        // log("specContent : " + specContent);
        log("exportURL : " + exportURL);
        var content = NSString.stringWithString(specContent);
        [content writeToFile: exportURL
                  atomically: false
                    encoding: NSUTF8StringEncoding
                       error: null];
        log('export index done');
        this.message(_("Export complete!"));
    },
    getArtboard: function( msArtboard, savePath, symbolOffset ){
        var context = this.context;
        var document = this.document;
        var selection = this.selection;
        log('>>getArtboard');
        var tempCon = this.templateContents.tempCon;
        var jqCon = this.templateContents.jqCon;
        var jsappCon = this.templateContents.jsappCon;
        var specCon = this.templateContents.specCon;
        var cssnorCon = this.templateContents.cssnorCon;
        var cssappCon = this.templateContents.cssappCon;

        if(msArtboard instanceof MSArtboardGroup || msArtboard instanceof MSSymbolMaster){
            var artboardFrame = msArtboard.frame();
            var layers = [];
            var notes = [];
            var layerIter = msArtboard.children().reverseObjectEnumerator();
            var name = msArtboard.objectID();
            while(msLayer = layerIter.nextObject()) {
                var msGroup = msLayer.parentGroup();

                if(msLayer && this.is(msLayer, MSLayerGroup) && /LABEL\#|NOTE\#/.exec(msLayer.name())){
                    var msText = msLayer.children()[2];

                    notes.push({
                        rect: this.rectToJSON(msLayer.absoluteRect(), artboardFrame),
                        note: this.toJSString(msText.stringValue()).replace(/\n/g,"<br>")
                    });

                    msLayer.setIsVisible(false);
                }

                var layerStates = this.getStates(msLayer);

                if (
                    !this.isExportable(msLayer) ||
                    !layerStates.isVisible ||
                    layerStates.isLocked ||
                    layerStates.hasSlices ||
                    this.isMeasure(msLayer)
                )
                {
                    continue;
                }

                var type = this.is(msLayer, MSTextLayer) ? "text" : "shape";
                type = this.is(msLayer, MSSymbolInstance) ? "symbol" : type;
                type = this.hasExportSizes(msLayer) || this.is(msLayer, MSSliceLayer) ? "slice" : type;

                var layer = {};
                layer.objectID = this.toJSString(msLayer.objectID());
                layer.type = type;
                layer.name = this.toJSString(msLayer.name());
                layer.rect = this.rectToJSON(msLayer.absoluteRect(), artboardFrame);
                if(symbolOffset){
                    layer.rect.x = symbolOffset.x + layer.rect.x;
                    layer.rect.y = symbolOffset.y + layer.rect.y;
                }
                layer.exportSizes = this.exportSizes(msLayer, savePath);

                if ( ! ( this.is(msLayer, MSSliceLayer) || this.is(msLayer, MSSymbolInstance) ) ) {
                    var layerStyle = msLayer.style();

                    layer.rotation = msLayer.rotation();
                    layer.radius = ( msLayer.layers && this.is(msLayer.layers().firstObject(), MSRectangleShape) ) ? msLayer.layers().firstObject().fixedRadius(): null;
                    layer.borders = this.getBorders(layerStyle);
                    layer.fills = this.getFills(layerStyle);
                    layer.shadows = this.getShadows(layerStyle);
                    layer.opacity = this.getOpacity(layerStyle);
                    layer.styleName = (this.is(msLayer, MSTextLayer))? this.getStyleName(layerStyle, true): this.getStyleName(layerStyle);
                }

                if ( this.is(msLayer, MSTextLayer) ) {
                    layer.content = this.toJSString(msLayer.stringValue()),
                    layer.color = this.colorToJSON(msLayer.textColor());
                    layer.fontSize = msLayer.fontSize();
                    layer.fontFace = this.toJSString(msLayer.fontPostscriptName());
                    layer.textAlign = this.TextAligns[msLayer.textAlignment()];
                    layer.letterSpacing = msLayer.characterSpacing();
                    layer.lineHeight = msLayer.lineHeight();
                    var layerStyle = msLayer.style();
                    layer.styleName = this.getStyleName(layerStyle, true);
                }


                if(msLayer.hasClippingMask()){
                    this.maskObjectID = msGroup.objectID();
                    this.maskRect = this.rectToJSON(msLayer.absoluteRect(), artboardFrame);
                }
                else if (this.maskObjectID != msGroup.objectID() || msLayer.shouldBreakMaskChain()) {
                    this.maskObjectID = undefined;
                    this.maskRect = undefined;
                }

                if ( type ===  "slice" ){
                    this.slicesData.push(layer);
                }

                if (layerStates.isMaskChildLayer){
                    layer.rect = this.updateMaskRect(layer.rect)
                }

                if (layer.rect){
                    layers.push(layer);
                }

                if( this.is(msLayer, MSSymbolInstance) ){
                    var symbolLayers = this.getArtboard(msLayer.symbolMaster(), savePath, {x: layer.rect.x, y: layer.rect.y});
                    symbolLayers.forEach(function(layer){
                        layers.push(layer);
                    });
                }
            }

            if(!symbolOffset){
                var imageFileName = name + ".png";
                var imagePath = this.toJSString( NSTemporaryDirectory().stringByAppendingPathComponent(imageFileName) );
                var sliceArtboard = MSExportRequest.exportRequestsFromExportableLayer(msArtboard).firstObject();
                sliceArtboard.scale = 2
                [document saveArtboardOrSlice: sliceArtboard
                    toFile: imagePath ];

                var imageURL = NSURL.fileURLWithPath(imagePath);
                var imageData = NSData.dataWithContentsOfURL(imageURL);
                var imageBase64 = imageData.base64EncodedStringWithOptions(0);

                var theArtPage = msArtboard.parentGroup();
                var thePageName = this.toJSString(theArtPage.name()).replace(/[\/\\]/g, "-")
                var artboardData = {
                    objectID: this.toJSString(msArtboard.objectID()),
                    pageName: thePageName, // for group all artboards of one page
                    name: this.toJSString(msArtboard.name()),
                    imageBase64: this.toJSString(imageBase64),
                    width: artboardFrame.width(),
                    height: artboardFrame.height()
                };

                this.artboardsData.push(artboardData);


                var data = this.extend(artboardData, {
                    resolution: this.configs.resolution,
                    zoom: 1,
                    layers: layers,
                    notes: notes
                });

                var specContent = this.template(specCon, {json: JSON.stringify(data).replace(/\u2028/g,'\\u2028').replace(/\u2029/g,'\\u2029')});

                var content = this.template(tempCon, {
                    cssNormalize: cssnorCon,
                    cssApp: cssappCon,
                    jsjQuery: jqCon,
                    jsApp: jsappCon,
                    jsSpec: specContent
                });
                content = NSString.stringWithString(content);
                var artname = this.toJSString( msArtboard.name() ).replace(/[\/\\]/g, "-");
                var exportURL = savePath.stringByAppendingPathComponent(artboardData.objectID +".html");

                [content writeToFile: exportURL
                          atomically: false
                            encoding: NSUTF8StringEncoding
                               error: null];
                               
            }
            else{
                return layers
            }
        }
    }
});
//
var Marketch = function(){
  //需要处理的所有画板
  this.allArtboards = [];
}
Marketch.prototype = {
  /**
   * @param expConfig.layer {boolean} 是否导出图层为图片
   * @param expConfig.artboard {string} 导出画板选项: selected|page|all
   * @param expConfig.saveSource {boolean} 是否保存sketch源文件
   * @return
   */
  run: function(expConfig){
    var loopObj = null, loopVar = null
    //导出选中画板
    if(expConfig.artboard == 0){
      loopObj = ctx.selection.objectEnumerator();
      while(loopVar = loopObj.nextObject()){
        if(loopVar.className() == 'MSArtboardGroup'){
          this.allArtboards.push(loopVar);
        }
      }
    }

    //导出当前页下全部画板
    if(expConfig.artboard == 1){
       // 不导出以单个“-”开头的页面和画板
       var currentPageObj = doc.currentPage();
        if(!/^-{1}[^-]*?.*$/.test(currentPageObj.name())){
          var artloops = currentPageObj.artboards().reverseObjectEnumerator();
          while(artboard = artloops.nextObject()){
            // 过滤掉Symbol
            log('artboard.name() = '+ artboard.name());
            //
            if(!/^-{1}[^-]*?.*$/.test(artboard.name())){
              this.allArtboards.push(artboard);
            }
          }
        }
    }

    //导出所有画板

    if(expConfig.artboard == 2){
      loopObj = doc.pages().objectEnumerator();
      while(loopVar = loopObj.nextObject()){
        // 不导出以单个“-”开头的页面和画板
        if(!/^-{1}[^-]*?.*$/.test(loopVar.name())){
          var artloops = loopVar.artboards().reverseObjectEnumerator();
          while(artboard = artloops.nextObject()){
            // 过滤掉Symbol
            if(!/^-{1}[^-]*?.*$/.test(artboard.name())){
              this.allArtboards.push(artboard);
            }
          }
        }
      }
    }
    //画板不存在
    if(this.allArtboards.length == 0){
      doc.showMessage('No ArtBoard can be export');
    }
  }
}

var ctx = null;
var doc = null;


function onRun(context){
    ctx = context;
    doc = context.document;
	var expConfig = getConfigs();
    var mark = new Marketch();
    if (expConfig.button == 1000) {
        mark.run(expConfig);
        com.utom.init(context);
        com.utom.specExportPlus(mark.allArtboards);
    }
}

function getConfigs(){
	var altWin = COSAlertWindow.new();
    var items = ['Selected Artboard', 'Artboards on Current Page', 'All Artboards(would be slow)'];
    var comboBox = NSComboBox.alloc().initWithFrame(NSMakeRect(0,0,200,25));
    var exportBox = NSButton.alloc().initWithFrame(NSMakeRect(0,0,250,14));
    var sourceBox = NSButton.alloc().initWithFrame(NSMakeRect(0,0,250,14));

    altWin.setMessageText('Sketch Export Plus');
    altWin.setInformativeText('Which artboard would you like to export?');
    altWin.addButtonWithTitle('Confirm');
    altWin.addButtonWithTitle('Cancel');

    comboBox.addItemsWithObjectValues(items);
    comboBox.selectItemAtIndex(0);

    altWin.addAccessoryView(comboBox);
    
    return {
      //用户点击按钮 确认返回1000，取消返回1001
      button: altWin.runModal(),
      //需要导出的画板返回值为索引
      artboard: comboBox.indexOfSelectedItem()
    }
}





    